// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: p2p/p2p.proto

package p2p

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*Message_Version
	//	*Message_PeerList
	//	*Message_Ping
	//	*Message_Pong
	Message       isMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_p2p_p2p_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_p2p_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_p2p_p2p_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetMessage() isMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Message) GetVersion() *Version {
	if x != nil {
		if x, ok := x.Message.(*Message_Version); ok {
			return x.Version
		}
	}
	return nil
}

func (x *Message) GetPeerList() *PeerList {
	if x != nil {
		if x, ok := x.Message.(*Message_PeerList); ok {
			return x.PeerList
		}
	}
	return nil
}

func (x *Message) GetPing() *Ping {
	if x != nil {
		if x, ok := x.Message.(*Message_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *Message) GetPong() *Pong {
	if x != nil {
		if x, ok := x.Message.(*Message_Pong); ok {
			return x.Pong
		}
	}
	return nil
}

type isMessage_Message interface {
	isMessage_Message()
}

type Message_Version struct {
	Version *Version `protobuf:"bytes,1,opt,name=version,proto3,oneof"`
}

type Message_PeerList struct {
	PeerList *PeerList `protobuf:"bytes,2,opt,name=peer_list,json=peerList,proto3,oneof"`
}

type Message_Ping struct {
	Ping *Ping `protobuf:"bytes,3,opt,name=ping,proto3,oneof"`
}

type Message_Pong struct {
	Pong *Pong `protobuf:"bytes,4,opt,name=pong,proto3,oneof"`
}

func (*Message_Version) isMessage_Message() {}

func (*Message_PeerList) isMessage_Message() {}

func (*Message_Ping) isMessage_Message() {}

func (*Message_Pong) isMessage_Message() {}

type PeerList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Peers         []*TrustedPeer         `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerList) Reset() {
	*x = PeerList{}
	mi := &file_p2p_p2p_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerList) ProtoMessage() {}

func (x *PeerList) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_p2p_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerList.ProtoReflect.Descriptor instead.
func (*PeerList) Descriptor() ([]byte, []int) {
	return file_p2p_p2p_proto_rawDescGZIP(), []int{1}
}

func (x *PeerList) GetPeers() []*TrustedPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type TrustedPeer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Hash of public key
	PublicKey     []byte                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`           // Host:port
	Capabilities  []string               `protobuf:"bytes,4,rep,name=capabilities,proto3" json:"capabilities,omitempty"` // ["oci-host", "relay"]
	Signature     []byte                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`       // Ed25519 signature over canonical fields
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrustedPeer) Reset() {
	*x = TrustedPeer{}
	mi := &file_p2p_p2p_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedPeer) ProtoMessage() {}

func (x *TrustedPeer) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_p2p_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedPeer.ProtoReflect.Descriptor instead.
func (*TrustedPeer) Descriptor() ([]byte, []int) {
	return file_p2p_p2p_proto_rawDescGZIP(), []int{2}
}

func (x *TrustedPeer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrustedPeer) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *TrustedPeer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TrustedPeer) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *TrustedPeer) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Ping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ping) Reset() {
	*x = Ping{}
	mi := &file_p2p_p2p_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_p2p_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_p2p_p2p_proto_rawDescGZIP(), []int{3}
}

type Pong struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pong) Reset() {
	*x = Pong{}
	mi := &file_p2p_p2p_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_p2p_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_p2p_p2p_proto_rawDescGZIP(), []int{4}
}

type Version struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`          // Hash of the public key
	Agent         string                 `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`                          // e.g. "spore-agent/0.1.0"
	Protocol      string                 `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`                    // e.g. "p2p/1"
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                 // Unix timestamp
	PublicKey     []byte                 `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // Ed25519 public key
	Signature     []byte                 `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`                  // Signature over (node_id + agent + protocol + timestamp)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Version) Reset() {
	*x = Version{}
	mi := &file_p2p_p2p_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_p2p_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_p2p_p2p_proto_rawDescGZIP(), []int{5}
}

func (x *Version) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Version) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

func (x *Version) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Version) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Version) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Version) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_p2p_p2p_proto protoreflect.FileDescriptor

const file_p2p_p2p_proto_rawDesc = "" +
	"\n" +
	"\rp2p/p2p.proto\x12\x03p2p\"\xae\x01\n" +
	"\aMessage\x12(\n" +
	"\aversion\x18\x01 \x01(\v2\f.p2p.VersionH\x00R\aversion\x12,\n" +
	"\tpeer_list\x18\x02 \x01(\v2\r.p2p.PeerListH\x00R\bpeerList\x12\x1f\n" +
	"\x04ping\x18\x03 \x01(\v2\t.p2p.PingH\x00R\x04ping\x12\x1f\n" +
	"\x04pong\x18\x04 \x01(\v2\t.p2p.PongH\x00R\x04pongB\t\n" +
	"\amessage\"2\n" +
	"\bPeerList\x12&\n" +
	"\x05peers\x18\x01 \x03(\v2\x10.p2p.TrustedPeerR\x05peers\"\x98\x01\n" +
	"\vTrustedPeer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"public_key\x18\x02 \x01(\fR\tpublicKey\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\"\n" +
	"\fcapabilities\x18\x04 \x03(\tR\fcapabilities\x12\x1c\n" +
	"\tsignature\x18\x05 \x01(\fR\tsignature\"\x06\n" +
	"\x04Ping\"\x06\n" +
	"\x04Pong\"\xaf\x01\n" +
	"\aVersion\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x14\n" +
	"\x05agent\x18\x02 \x01(\tR\x05agent\x12\x1a\n" +
	"\bprotocol\x18\x03 \x01(\tR\bprotocol\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x12\x1d\n" +
	"\n" +
	"public_key\x18\x05 \x01(\fR\tpublicKey\x12\x1c\n" +
	"\tsignature\x18\x06 \x01(\fR\tsignatureB)Z'github.com/hexfusion/spore/proto/pb/p2pb\x06proto3"

var (
	file_p2p_p2p_proto_rawDescOnce sync.Once
	file_p2p_p2p_proto_rawDescData []byte
)

func file_p2p_p2p_proto_rawDescGZIP() []byte {
	file_p2p_p2p_proto_rawDescOnce.Do(func() {
		file_p2p_p2p_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_p2p_p2p_proto_rawDesc), len(file_p2p_p2p_proto_rawDesc)))
	})
	return file_p2p_p2p_proto_rawDescData
}

var file_p2p_p2p_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_p2p_p2p_proto_goTypes = []any{
	(*Message)(nil),     // 0: p2p.Message
	(*PeerList)(nil),    // 1: p2p.PeerList
	(*TrustedPeer)(nil), // 2: p2p.TrustedPeer
	(*Ping)(nil),        // 3: p2p.Ping
	(*Pong)(nil),        // 4: p2p.Pong
	(*Version)(nil),     // 5: p2p.Version
}
var file_p2p_p2p_proto_depIdxs = []int32{
	5, // 0: p2p.Message.version:type_name -> p2p.Version
	1, // 1: p2p.Message.peer_list:type_name -> p2p.PeerList
	3, // 2: p2p.Message.ping:type_name -> p2p.Ping
	4, // 3: p2p.Message.pong:type_name -> p2p.Pong
	2, // 4: p2p.PeerList.peers:type_name -> p2p.TrustedPeer
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_p2p_p2p_proto_init() }
func file_p2p_p2p_proto_init() {
	if File_p2p_p2p_proto != nil {
		return
	}
	file_p2p_p2p_proto_msgTypes[0].OneofWrappers = []any{
		(*Message_Version)(nil),
		(*Message_PeerList)(nil),
		(*Message_Ping)(nil),
		(*Message_Pong)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_p2p_p2p_proto_rawDesc), len(file_p2p_p2p_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_p2p_p2p_proto_goTypes,
		DependencyIndexes: file_p2p_p2p_proto_depIdxs,
		MessageInfos:      file_p2p_p2p_proto_msgTypes,
	}.Build()
	File_p2p_p2p_proto = out.File
	file_p2p_p2p_proto_goTypes = nil
	file_p2p_p2p_proto_depIdxs = nil
}
